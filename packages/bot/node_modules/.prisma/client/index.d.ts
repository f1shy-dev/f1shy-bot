
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Guild
 */

export type Guild = {
  id: string
}

/**
 * Model GuildSettings
 */

export type GuildSettings = {
  guildId: string
  prefix: string
  advancedErrors: boolean
}

/**
 * Model User
 */

export type User = {
  id: string
  isBotOwner: boolean
}

/**
 * Model BotSettings
 */

export type BotSettings = {
  id: number
  botOwnerID: string
  defaultPrefix: string
  defaultAdvancedErrors: boolean
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Guilds
 * const guilds = await prisma.guild.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Guilds
   * const guilds = await prisma.guild.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.$executeRaw``, values will be escaped automatically
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.$executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.$queryRaw``, values will be escaped automatically
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.$queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.guild`: Exposes CRUD operations for the **Guild** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Guilds
    * const guilds = await prisma.guild.findMany()
    * ```
    */
  get guild(): Prisma.GuildDelegate<GlobalReject>;

  /**
   * `prisma.guildSettings`: Exposes CRUD operations for the **GuildSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GuildSettings
    * const guildSettings = await prisma.guildSettings.findMany()
    * ```
    */
  get guildSettings(): Prisma.GuildSettingsDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.botSettings`: Exposes CRUD operations for the **BotSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BotSettings
    * const botSettings = await prisma.botSettings.findMany()
    * ```
    */
  get botSettings(): Prisma.BotSettingsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.26.0
   * Query Engine version: cdba6ec525e0213cce26f8e4bb23cf556d1479bb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Guild: 'Guild',
    GuildSettings: 'GuildSettings',
    User: 'User',
    BotSettings: 'BotSettings'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Guild
   */


  export type AggregateGuild = {
    _count: GuildCountAggregateOutputType | null
    count: GuildCountAggregateOutputType | null
    _min: GuildMinAggregateOutputType | null
    min: GuildMinAggregateOutputType | null
    _max: GuildMaxAggregateOutputType | null
    max: GuildMaxAggregateOutputType | null
  }

  export type GuildMinAggregateOutputType = {
    id: string | null
  }

  export type GuildMaxAggregateOutputType = {
    id: string | null
  }

  export type GuildCountAggregateOutputType = {
    id: number
    _all: number
  }


  export type GuildMinAggregateInputType = {
    id?: true
  }

  export type GuildMaxAggregateInputType = {
    id?: true
  }

  export type GuildCountAggregateInputType = {
    id?: true
    _all?: true
  }

  export type GuildAggregateArgs = {
    /**
     * Filter which Guild to aggregate.
     * 
    **/
    where?: GuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guilds to fetch.
     * 
    **/
    orderBy?: Enumerable<GuildOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guilds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guilds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Guilds
    **/
    _count?: true | GuildCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | GuildCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuildMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: GuildMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuildMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: GuildMaxAggregateInputType
  }

  export type GetGuildAggregateType<T extends GuildAggregateArgs> = {
        [P in keyof T & keyof AggregateGuild]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuild[P]>
      : GetScalarType<T[P], AggregateGuild[P]>
  }


    
    
  export type GuildGroupByArgs = {
    where?: GuildWhereInput
    orderBy?: Enumerable<GuildOrderByInput>
    by: Array<GuildScalarFieldEnum>
    having?: GuildScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuildCountAggregateInputType | true
    _min?: GuildMinAggregateInputType
    _max?: GuildMaxAggregateInputType
  }


  export type GuildGroupByOutputType = {
    id: string
    _count: GuildCountAggregateOutputType | null
    _min: GuildMinAggregateOutputType | null
    _max: GuildMaxAggregateOutputType | null
  }

  type GetGuildGroupByPayload<T extends GuildGroupByArgs> = Promise<
    Array<
      PickArray<GuildGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof GuildGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], GuildGroupByOutputType[P]> 
            : GetScalarType<T[P], GuildGroupByOutputType[P]>
        }
      > 
    >


  export type GuildSelect = {
    id?: boolean
    mods?: boolean | UserFindManyArgs
    admins?: boolean | UserFindManyArgs
    settings?: boolean | GuildSettingsArgs
  }

  export type GuildInclude = {
    mods?: boolean | UserFindManyArgs
    admins?: boolean | UserFindManyArgs
    settings?: boolean | GuildSettingsArgs
  }

  export type GuildGetPayload<
    S extends boolean | null | undefined | GuildArgs,
    U = keyof S
      > = S extends true
        ? Guild
    : S extends undefined
    ? never
    : S extends GuildArgs | GuildFindManyArgs
    ?'include' extends U
    ? Guild  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'mods'
        ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'admins'
        ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'settings'
        ? GuildSettingsGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Guild ?Guild [P]
  : 
          P extends 'mods'
        ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'admins'
        ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'settings'
        ? GuildSettingsGetPayload<S['select'][P]> | null : never
  } 
    : Guild
  : Guild


  type GuildCountArgs = Merge<
    Omit<GuildFindManyArgs, 'select' | 'include'> & {
      select?: GuildCountAggregateInputType | true
    }
  >

  export interface GuildDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Guild that matches the filter.
     * @param {GuildFindUniqueArgs} args - Arguments to find a Guild
     * @example
     * // Get one Guild
     * const guild = await prisma.guild.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GuildFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GuildFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Guild'> extends True ? CheckSelect<T, Prisma__GuildClient<Guild>, Prisma__GuildClient<GuildGetPayload<T>>> : CheckSelect<T, Prisma__GuildClient<Guild | null >, Prisma__GuildClient<GuildGetPayload<T> | null >>

    /**
     * Find the first Guild that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildFindFirstArgs} args - Arguments to find a Guild
     * @example
     * // Get one Guild
     * const guild = await prisma.guild.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GuildFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GuildFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Guild'> extends True ? CheckSelect<T, Prisma__GuildClient<Guild>, Prisma__GuildClient<GuildGetPayload<T>>> : CheckSelect<T, Prisma__GuildClient<Guild | null >, Prisma__GuildClient<GuildGetPayload<T> | null >>

    /**
     * Find zero or more Guilds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Guilds
     * const guilds = await prisma.guild.findMany()
     * 
     * // Get first 10 Guilds
     * const guilds = await prisma.guild.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guildWithIdOnly = await prisma.guild.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GuildFindManyArgs>(
      args?: SelectSubset<T, GuildFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Guild>>, PrismaPromise<Array<GuildGetPayload<T>>>>

    /**
     * Create a Guild.
     * @param {GuildCreateArgs} args - Arguments to create a Guild.
     * @example
     * // Create one Guild
     * const Guild = await prisma.guild.create({
     *   data: {
     *     // ... data to create a Guild
     *   }
     * })
     * 
    **/
    create<T extends GuildCreateArgs>(
      args: SelectSubset<T, GuildCreateArgs>
    ): CheckSelect<T, Prisma__GuildClient<Guild>, Prisma__GuildClient<GuildGetPayload<T>>>

    /**
     * Create many Guilds.
     *     @param {GuildCreateManyArgs} args - Arguments to create many Guilds.
     *     @example
     *     // Create many Guilds
     *     const guild = await prisma.guild.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GuildCreateManyArgs>(
      args?: SelectSubset<T, GuildCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Guild.
     * @param {GuildDeleteArgs} args - Arguments to delete one Guild.
     * @example
     * // Delete one Guild
     * const Guild = await prisma.guild.delete({
     *   where: {
     *     // ... filter to delete one Guild
     *   }
     * })
     * 
    **/
    delete<T extends GuildDeleteArgs>(
      args: SelectSubset<T, GuildDeleteArgs>
    ): CheckSelect<T, Prisma__GuildClient<Guild>, Prisma__GuildClient<GuildGetPayload<T>>>

    /**
     * Update one Guild.
     * @param {GuildUpdateArgs} args - Arguments to update one Guild.
     * @example
     * // Update one Guild
     * const guild = await prisma.guild.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GuildUpdateArgs>(
      args: SelectSubset<T, GuildUpdateArgs>
    ): CheckSelect<T, Prisma__GuildClient<Guild>, Prisma__GuildClient<GuildGetPayload<T>>>

    /**
     * Delete zero or more Guilds.
     * @param {GuildDeleteManyArgs} args - Arguments to filter Guilds to delete.
     * @example
     * // Delete a few Guilds
     * const { count } = await prisma.guild.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GuildDeleteManyArgs>(
      args?: SelectSubset<T, GuildDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Guilds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Guilds
     * const guild = await prisma.guild.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GuildUpdateManyArgs>(
      args: SelectSubset<T, GuildUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Guild.
     * @param {GuildUpsertArgs} args - Arguments to update or create a Guild.
     * @example
     * // Update or create a Guild
     * const guild = await prisma.guild.upsert({
     *   create: {
     *     // ... data to create a Guild
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Guild we want to update
     *   }
     * })
    **/
    upsert<T extends GuildUpsertArgs>(
      args: SelectSubset<T, GuildUpsertArgs>
    ): CheckSelect<T, Prisma__GuildClient<Guild>, Prisma__GuildClient<GuildGetPayload<T>>>

    /**
     * Count the number of Guilds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildCountArgs} args - Arguments to filter Guilds to count.
     * @example
     * // Count the number of Guilds
     * const count = await prisma.guild.count({
     *   where: {
     *     // ... the filter for the Guilds we want to count
     *   }
     * })
    **/
    count<T extends GuildCountArgs>(
      args?: Subset<T, GuildCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuildCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Guild.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuildAggregateArgs>(args: Subset<T, GuildAggregateArgs>): PrismaPromise<GetGuildAggregateType<T>>

    /**
     * Group by Guild.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuildGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuildGroupByArgs['orderBy'] }
        : { orderBy?: GuildGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuildGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuildGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Guild.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GuildClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    mods<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    admins<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    settings<T extends GuildSettingsArgs = {}>(args?: Subset<T, GuildSettingsArgs>): CheckSelect<T, Prisma__GuildSettingsClient<GuildSettings | null >, Prisma__GuildSettingsClient<GuildSettingsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Guild findUnique
   */
  export type GuildFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
    /**
     * Throw an Error if a Guild can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Guild to fetch.
     * 
    **/
    where: GuildWhereUniqueInput
  }


  /**
   * Guild findFirst
   */
  export type GuildFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
    /**
     * Throw an Error if a Guild can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Guild to fetch.
     * 
    **/
    where?: GuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guilds to fetch.
     * 
    **/
    orderBy?: Enumerable<GuildOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Guilds.
     * 
    **/
    cursor?: GuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guilds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guilds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Guilds.
     * 
    **/
    distinct?: Enumerable<GuildScalarFieldEnum>
  }


  /**
   * Guild findMany
   */
  export type GuildFindManyArgs = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
    /**
     * Filter, which Guilds to fetch.
     * 
    **/
    where?: GuildWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Guilds to fetch.
     * 
    **/
    orderBy?: Enumerable<GuildOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Guilds.
     * 
    **/
    cursor?: GuildWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Guilds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Guilds.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GuildScalarFieldEnum>
  }


  /**
   * Guild create
   */
  export type GuildCreateArgs = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
    /**
     * The data needed to create a Guild.
     * 
    **/
    data: XOR<GuildCreateInput, GuildUncheckedCreateInput>
  }


  /**
   * Guild createMany
   */
  export type GuildCreateManyArgs = {
    data: Enumerable<GuildCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Guild update
   */
  export type GuildUpdateArgs = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
    /**
     * The data needed to update a Guild.
     * 
    **/
    data: XOR<GuildUpdateInput, GuildUncheckedUpdateInput>
    /**
     * Choose, which Guild to update.
     * 
    **/
    where: GuildWhereUniqueInput
  }


  /**
   * Guild updateMany
   */
  export type GuildUpdateManyArgs = {
    data: XOR<GuildUpdateManyMutationInput, GuildUncheckedUpdateManyInput>
    where?: GuildWhereInput
  }


  /**
   * Guild upsert
   */
  export type GuildUpsertArgs = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
    /**
     * The filter to search for the Guild to update in case it exists.
     * 
    **/
    where: GuildWhereUniqueInput
    /**
     * In case the Guild found by the `where` argument doesn't exist, create a new Guild with this data.
     * 
    **/
    create: XOR<GuildCreateInput, GuildUncheckedCreateInput>
    /**
     * In case the Guild was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GuildUpdateInput, GuildUncheckedUpdateInput>
  }


  /**
   * Guild delete
   */
  export type GuildDeleteArgs = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
    /**
     * Filter which Guild to delete.
     * 
    **/
    where: GuildWhereUniqueInput
  }


  /**
   * Guild deleteMany
   */
  export type GuildDeleteManyArgs = {
    where?: GuildWhereInput
  }


  /**
   * Guild without action
   */
  export type GuildArgs = {
    /**
     * Select specific fields to fetch from the Guild
     * 
    **/
    select?: GuildSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildInclude | null
  }



  /**
   * Model GuildSettings
   */


  export type AggregateGuildSettings = {
    _count: GuildSettingsCountAggregateOutputType | null
    count: GuildSettingsCountAggregateOutputType | null
    _min: GuildSettingsMinAggregateOutputType | null
    min: GuildSettingsMinAggregateOutputType | null
    _max: GuildSettingsMaxAggregateOutputType | null
    max: GuildSettingsMaxAggregateOutputType | null
  }

  export type GuildSettingsMinAggregateOutputType = {
    guildId: string | null
    prefix: string | null
    advancedErrors: boolean | null
  }

  export type GuildSettingsMaxAggregateOutputType = {
    guildId: string | null
    prefix: string | null
    advancedErrors: boolean | null
  }

  export type GuildSettingsCountAggregateOutputType = {
    guildId: number
    prefix: number
    advancedErrors: number
    _all: number
  }


  export type GuildSettingsMinAggregateInputType = {
    guildId?: true
    prefix?: true
    advancedErrors?: true
  }

  export type GuildSettingsMaxAggregateInputType = {
    guildId?: true
    prefix?: true
    advancedErrors?: true
  }

  export type GuildSettingsCountAggregateInputType = {
    guildId?: true
    prefix?: true
    advancedErrors?: true
    _all?: true
  }

  export type GuildSettingsAggregateArgs = {
    /**
     * Filter which GuildSettings to aggregate.
     * 
    **/
    where?: GuildSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildSettings to fetch.
     * 
    **/
    orderBy?: Enumerable<GuildSettingsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GuildSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildSettings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildSettings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GuildSettings
    **/
    _count?: true | GuildSettingsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | GuildSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuildSettingsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: GuildSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuildSettingsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: GuildSettingsMaxAggregateInputType
  }

  export type GetGuildSettingsAggregateType<T extends GuildSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateGuildSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuildSettings[P]>
      : GetScalarType<T[P], AggregateGuildSettings[P]>
  }


    
    
  export type GuildSettingsGroupByArgs = {
    where?: GuildSettingsWhereInput
    orderBy?: Enumerable<GuildSettingsOrderByInput>
    by: Array<GuildSettingsScalarFieldEnum>
    having?: GuildSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuildSettingsCountAggregateInputType | true
    _min?: GuildSettingsMinAggregateInputType
    _max?: GuildSettingsMaxAggregateInputType
  }


  export type GuildSettingsGroupByOutputType = {
    guildId: string
    prefix: string
    advancedErrors: boolean
    _count: GuildSettingsCountAggregateOutputType | null
    _min: GuildSettingsMinAggregateOutputType | null
    _max: GuildSettingsMaxAggregateOutputType | null
  }

  type GetGuildSettingsGroupByPayload<T extends GuildSettingsGroupByArgs> = Promise<
    Array<
      PickArray<GuildSettingsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof GuildSettingsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], GuildSettingsGroupByOutputType[P]> 
            : GetScalarType<T[P], GuildSettingsGroupByOutputType[P]>
        }
      > 
    >


  export type GuildSettingsSelect = {
    guild?: boolean | GuildArgs
    guildId?: boolean
    prefix?: boolean
    advancedErrors?: boolean
  }

  export type GuildSettingsInclude = {
    guild?: boolean | GuildArgs
  }

  export type GuildSettingsGetPayload<
    S extends boolean | null | undefined | GuildSettingsArgs,
    U = keyof S
      > = S extends true
        ? GuildSettings
    : S extends undefined
    ? never
    : S extends GuildSettingsArgs | GuildSettingsFindManyArgs
    ?'include' extends U
    ? GuildSettings  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'guild'
        ? GuildGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof GuildSettings ?GuildSettings [P]
  : 
          P extends 'guild'
        ? GuildGetPayload<S['select'][P]> : never
  } 
    : GuildSettings
  : GuildSettings


  type GuildSettingsCountArgs = Merge<
    Omit<GuildSettingsFindManyArgs, 'select' | 'include'> & {
      select?: GuildSettingsCountAggregateInputType | true
    }
  >

  export interface GuildSettingsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one GuildSettings that matches the filter.
     * @param {GuildSettingsFindUniqueArgs} args - Arguments to find a GuildSettings
     * @example
     * // Get one GuildSettings
     * const guildSettings = await prisma.guildSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GuildSettingsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GuildSettingsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GuildSettings'> extends True ? CheckSelect<T, Prisma__GuildSettingsClient<GuildSettings>, Prisma__GuildSettingsClient<GuildSettingsGetPayload<T>>> : CheckSelect<T, Prisma__GuildSettingsClient<GuildSettings | null >, Prisma__GuildSettingsClient<GuildSettingsGetPayload<T> | null >>

    /**
     * Find the first GuildSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildSettingsFindFirstArgs} args - Arguments to find a GuildSettings
     * @example
     * // Get one GuildSettings
     * const guildSettings = await prisma.guildSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GuildSettingsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GuildSettingsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GuildSettings'> extends True ? CheckSelect<T, Prisma__GuildSettingsClient<GuildSettings>, Prisma__GuildSettingsClient<GuildSettingsGetPayload<T>>> : CheckSelect<T, Prisma__GuildSettingsClient<GuildSettings | null >, Prisma__GuildSettingsClient<GuildSettingsGetPayload<T> | null >>

    /**
     * Find zero or more GuildSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildSettingsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GuildSettings
     * const guildSettings = await prisma.guildSettings.findMany()
     * 
     * // Get first 10 GuildSettings
     * const guildSettings = await prisma.guildSettings.findMany({ take: 10 })
     * 
     * // Only select the `guildId`
     * const guildSettingsWithGuildIdOnly = await prisma.guildSettings.findMany({ select: { guildId: true } })
     * 
    **/
    findMany<T extends GuildSettingsFindManyArgs>(
      args?: SelectSubset<T, GuildSettingsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<GuildSettings>>, PrismaPromise<Array<GuildSettingsGetPayload<T>>>>

    /**
     * Create a GuildSettings.
     * @param {GuildSettingsCreateArgs} args - Arguments to create a GuildSettings.
     * @example
     * // Create one GuildSettings
     * const GuildSettings = await prisma.guildSettings.create({
     *   data: {
     *     // ... data to create a GuildSettings
     *   }
     * })
     * 
    **/
    create<T extends GuildSettingsCreateArgs>(
      args: SelectSubset<T, GuildSettingsCreateArgs>
    ): CheckSelect<T, Prisma__GuildSettingsClient<GuildSettings>, Prisma__GuildSettingsClient<GuildSettingsGetPayload<T>>>

    /**
     * Create many GuildSettings.
     *     @param {GuildSettingsCreateManyArgs} args - Arguments to create many GuildSettings.
     *     @example
     *     // Create many GuildSettings
     *     const guildSettings = await prisma.guildSettings.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GuildSettingsCreateManyArgs>(
      args?: SelectSubset<T, GuildSettingsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a GuildSettings.
     * @param {GuildSettingsDeleteArgs} args - Arguments to delete one GuildSettings.
     * @example
     * // Delete one GuildSettings
     * const GuildSettings = await prisma.guildSettings.delete({
     *   where: {
     *     // ... filter to delete one GuildSettings
     *   }
     * })
     * 
    **/
    delete<T extends GuildSettingsDeleteArgs>(
      args: SelectSubset<T, GuildSettingsDeleteArgs>
    ): CheckSelect<T, Prisma__GuildSettingsClient<GuildSettings>, Prisma__GuildSettingsClient<GuildSettingsGetPayload<T>>>

    /**
     * Update one GuildSettings.
     * @param {GuildSettingsUpdateArgs} args - Arguments to update one GuildSettings.
     * @example
     * // Update one GuildSettings
     * const guildSettings = await prisma.guildSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GuildSettingsUpdateArgs>(
      args: SelectSubset<T, GuildSettingsUpdateArgs>
    ): CheckSelect<T, Prisma__GuildSettingsClient<GuildSettings>, Prisma__GuildSettingsClient<GuildSettingsGetPayload<T>>>

    /**
     * Delete zero or more GuildSettings.
     * @param {GuildSettingsDeleteManyArgs} args - Arguments to filter GuildSettings to delete.
     * @example
     * // Delete a few GuildSettings
     * const { count } = await prisma.guildSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GuildSettingsDeleteManyArgs>(
      args?: SelectSubset<T, GuildSettingsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more GuildSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GuildSettings
     * const guildSettings = await prisma.guildSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GuildSettingsUpdateManyArgs>(
      args: SelectSubset<T, GuildSettingsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one GuildSettings.
     * @param {GuildSettingsUpsertArgs} args - Arguments to update or create a GuildSettings.
     * @example
     * // Update or create a GuildSettings
     * const guildSettings = await prisma.guildSettings.upsert({
     *   create: {
     *     // ... data to create a GuildSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GuildSettings we want to update
     *   }
     * })
    **/
    upsert<T extends GuildSettingsUpsertArgs>(
      args: SelectSubset<T, GuildSettingsUpsertArgs>
    ): CheckSelect<T, Prisma__GuildSettingsClient<GuildSettings>, Prisma__GuildSettingsClient<GuildSettingsGetPayload<T>>>

    /**
     * Count the number of GuildSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildSettingsCountArgs} args - Arguments to filter GuildSettings to count.
     * @example
     * // Count the number of GuildSettings
     * const count = await prisma.guildSettings.count({
     *   where: {
     *     // ... the filter for the GuildSettings we want to count
     *   }
     * })
    **/
    count<T extends GuildSettingsCountArgs>(
      args?: Subset<T, GuildSettingsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuildSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GuildSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuildSettingsAggregateArgs>(args: Subset<T, GuildSettingsAggregateArgs>): PrismaPromise<GetGuildSettingsAggregateType<T>>

    /**
     * Group by GuildSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuildSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuildSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuildSettingsGroupByArgs['orderBy'] }
        : { orderBy?: GuildSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuildSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuildSettingsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for GuildSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GuildSettingsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    guild<T extends GuildArgs = {}>(args?: Subset<T, GuildArgs>): CheckSelect<T, Prisma__GuildClient<Guild | null >, Prisma__GuildClient<GuildGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * GuildSettings findUnique
   */
  export type GuildSettingsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the GuildSettings
     * 
    **/
    select?: GuildSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildSettingsInclude | null
    /**
     * Throw an Error if a GuildSettings can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which GuildSettings to fetch.
     * 
    **/
    where: GuildSettingsWhereUniqueInput
  }


  /**
   * GuildSettings findFirst
   */
  export type GuildSettingsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the GuildSettings
     * 
    **/
    select?: GuildSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildSettingsInclude | null
    /**
     * Throw an Error if a GuildSettings can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which GuildSettings to fetch.
     * 
    **/
    where?: GuildSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildSettings to fetch.
     * 
    **/
    orderBy?: Enumerable<GuildSettingsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GuildSettings.
     * 
    **/
    cursor?: GuildSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildSettings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildSettings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GuildSettings.
     * 
    **/
    distinct?: Enumerable<GuildSettingsScalarFieldEnum>
  }


  /**
   * GuildSettings findMany
   */
  export type GuildSettingsFindManyArgs = {
    /**
     * Select specific fields to fetch from the GuildSettings
     * 
    **/
    select?: GuildSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildSettingsInclude | null
    /**
     * Filter, which GuildSettings to fetch.
     * 
    **/
    where?: GuildSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuildSettings to fetch.
     * 
    **/
    orderBy?: Enumerable<GuildSettingsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GuildSettings.
     * 
    **/
    cursor?: GuildSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuildSettings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuildSettings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GuildSettingsScalarFieldEnum>
  }


  /**
   * GuildSettings create
   */
  export type GuildSettingsCreateArgs = {
    /**
     * Select specific fields to fetch from the GuildSettings
     * 
    **/
    select?: GuildSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildSettingsInclude | null
    /**
     * The data needed to create a GuildSettings.
     * 
    **/
    data: XOR<GuildSettingsCreateInput, GuildSettingsUncheckedCreateInput>
  }


  /**
   * GuildSettings createMany
   */
  export type GuildSettingsCreateManyArgs = {
    data: Enumerable<GuildSettingsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GuildSettings update
   */
  export type GuildSettingsUpdateArgs = {
    /**
     * Select specific fields to fetch from the GuildSettings
     * 
    **/
    select?: GuildSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildSettingsInclude | null
    /**
     * The data needed to update a GuildSettings.
     * 
    **/
    data: XOR<GuildSettingsUpdateInput, GuildSettingsUncheckedUpdateInput>
    /**
     * Choose, which GuildSettings to update.
     * 
    **/
    where: GuildSettingsWhereUniqueInput
  }


  /**
   * GuildSettings updateMany
   */
  export type GuildSettingsUpdateManyArgs = {
    data: XOR<GuildSettingsUpdateManyMutationInput, GuildSettingsUncheckedUpdateManyInput>
    where?: GuildSettingsWhereInput
  }


  /**
   * GuildSettings upsert
   */
  export type GuildSettingsUpsertArgs = {
    /**
     * Select specific fields to fetch from the GuildSettings
     * 
    **/
    select?: GuildSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildSettingsInclude | null
    /**
     * The filter to search for the GuildSettings to update in case it exists.
     * 
    **/
    where: GuildSettingsWhereUniqueInput
    /**
     * In case the GuildSettings found by the `where` argument doesn't exist, create a new GuildSettings with this data.
     * 
    **/
    create: XOR<GuildSettingsCreateInput, GuildSettingsUncheckedCreateInput>
    /**
     * In case the GuildSettings was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GuildSettingsUpdateInput, GuildSettingsUncheckedUpdateInput>
  }


  /**
   * GuildSettings delete
   */
  export type GuildSettingsDeleteArgs = {
    /**
     * Select specific fields to fetch from the GuildSettings
     * 
    **/
    select?: GuildSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildSettingsInclude | null
    /**
     * Filter which GuildSettings to delete.
     * 
    **/
    where: GuildSettingsWhereUniqueInput
  }


  /**
   * GuildSettings deleteMany
   */
  export type GuildSettingsDeleteManyArgs = {
    where?: GuildSettingsWhereInput
  }


  /**
   * GuildSettings without action
   */
  export type GuildSettingsArgs = {
    /**
     * Select specific fields to fetch from the GuildSettings
     * 
    **/
    select?: GuildSettingsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GuildSettingsInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    isBotOwner: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    isBotOwner: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    isBotOwner: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    isBotOwner?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    isBotOwner?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    isBotOwner?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }


    
    
  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    isBotOwner: boolean
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Promise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], UserGroupByOutputType[P]> 
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      > 
    >


  export type UserSelect = {
    id?: boolean
    adminGuilds?: boolean | GuildFindManyArgs
    modGuilds?: boolean | GuildFindManyArgs
    isBotOwner?: boolean
  }

  export type UserInclude = {
    adminGuilds?: boolean | GuildFindManyArgs
    modGuilds?: boolean | GuildFindManyArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'adminGuilds'
        ? Array < GuildGetPayload<S['include'][P]>>  :
        P extends 'modGuilds'
        ? Array < GuildGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'adminGuilds'
        ? Array < GuildGetPayload<S['select'][P]>>  :
        P extends 'modGuilds'
        ? Array < GuildGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    adminGuilds<T extends GuildFindManyArgs = {}>(args?: Subset<T, GuildFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Guild>>, PrismaPromise<Array<GuildGetPayload<T>>>>;

    modGuilds<T extends GuildFindManyArgs = {}>(args?: Subset<T, GuildFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Guild>>, PrismaPromise<Array<GuildGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model BotSettings
   */


  export type AggregateBotSettings = {
    _count: BotSettingsCountAggregateOutputType | null
    count: BotSettingsCountAggregateOutputType | null
    _avg: BotSettingsAvgAggregateOutputType | null
    avg: BotSettingsAvgAggregateOutputType | null
    _sum: BotSettingsSumAggregateOutputType | null
    sum: BotSettingsSumAggregateOutputType | null
    _min: BotSettingsMinAggregateOutputType | null
    min: BotSettingsMinAggregateOutputType | null
    _max: BotSettingsMaxAggregateOutputType | null
    max: BotSettingsMaxAggregateOutputType | null
  }

  export type BotSettingsAvgAggregateOutputType = {
    id: number | null
  }

  export type BotSettingsSumAggregateOutputType = {
    id: number | null
  }

  export type BotSettingsMinAggregateOutputType = {
    id: number | null
    botOwnerID: string | null
    defaultPrefix: string | null
    defaultAdvancedErrors: boolean | null
  }

  export type BotSettingsMaxAggregateOutputType = {
    id: number | null
    botOwnerID: string | null
    defaultPrefix: string | null
    defaultAdvancedErrors: boolean | null
  }

  export type BotSettingsCountAggregateOutputType = {
    id: number
    botOwnerID: number
    defaultPrefix: number
    defaultAdvancedErrors: number
    _all: number
  }


  export type BotSettingsAvgAggregateInputType = {
    id?: true
  }

  export type BotSettingsSumAggregateInputType = {
    id?: true
  }

  export type BotSettingsMinAggregateInputType = {
    id?: true
    botOwnerID?: true
    defaultPrefix?: true
    defaultAdvancedErrors?: true
  }

  export type BotSettingsMaxAggregateInputType = {
    id?: true
    botOwnerID?: true
    defaultPrefix?: true
    defaultAdvancedErrors?: true
  }

  export type BotSettingsCountAggregateInputType = {
    id?: true
    botOwnerID?: true
    defaultPrefix?: true
    defaultAdvancedErrors?: true
    _all?: true
  }

  export type BotSettingsAggregateArgs = {
    /**
     * Filter which BotSettings to aggregate.
     * 
    **/
    where?: BotSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BotSettings to fetch.
     * 
    **/
    orderBy?: Enumerable<BotSettingsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BotSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BotSettings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BotSettings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BotSettings
    **/
    _count?: true | BotSettingsCountAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_count`
    **/
    count?: true | BotSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BotSettingsAvgAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_avg`
    **/
    avg?: BotSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BotSettingsSumAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_sum`
    **/
    sum?: BotSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BotSettingsMinAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_min`
    **/
    min?: BotSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BotSettingsMaxAggregateInputType
    /**
     * @deprecated since 2.23.0 please use `_max`
    **/
    max?: BotSettingsMaxAggregateInputType
  }

  export type GetBotSettingsAggregateType<T extends BotSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateBotSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBotSettings[P]>
      : GetScalarType<T[P], AggregateBotSettings[P]>
  }


    
    
  export type BotSettingsGroupByArgs = {
    where?: BotSettingsWhereInput
    orderBy?: Enumerable<BotSettingsOrderByInput>
    by: Array<BotSettingsScalarFieldEnum>
    having?: BotSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BotSettingsCountAggregateInputType | true
    _avg?: BotSettingsAvgAggregateInputType
    _sum?: BotSettingsSumAggregateInputType
    _min?: BotSettingsMinAggregateInputType
    _max?: BotSettingsMaxAggregateInputType
  }


  export type BotSettingsGroupByOutputType = {
    id: number
    botOwnerID: string
    defaultPrefix: string
    defaultAdvancedErrors: boolean
    _count: BotSettingsCountAggregateOutputType | null
    _avg: BotSettingsAvgAggregateOutputType | null
    _sum: BotSettingsSumAggregateOutputType | null
    _min: BotSettingsMinAggregateOutputType | null
    _max: BotSettingsMaxAggregateOutputType | null
  }

  type GetBotSettingsGroupByPayload<T extends BotSettingsGroupByArgs> = Promise<
    Array<
      PickArray<BotSettingsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof BotSettingsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], BotSettingsGroupByOutputType[P]> 
            : GetScalarType<T[P], BotSettingsGroupByOutputType[P]>
        }
      > 
    >


  export type BotSettingsSelect = {
    id?: boolean
    botOwnerID?: boolean
    defaultPrefix?: boolean
    defaultAdvancedErrors?: boolean
  }

  export type BotSettingsGetPayload<
    S extends boolean | null | undefined | BotSettingsArgs,
    U = keyof S
      > = S extends true
        ? BotSettings
    : S extends undefined
    ? never
    : S extends BotSettingsArgs | BotSettingsFindManyArgs
    ?'include' extends U
    ? BotSettings 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof BotSettings ?BotSettings [P]
  : 
     never
  } 
    : BotSettings
  : BotSettings


  type BotSettingsCountArgs = Merge<
    Omit<BotSettingsFindManyArgs, 'select' | 'include'> & {
      select?: BotSettingsCountAggregateInputType | true
    }
  >

  export interface BotSettingsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one BotSettings that matches the filter.
     * @param {BotSettingsFindUniqueArgs} args - Arguments to find a BotSettings
     * @example
     * // Get one BotSettings
     * const botSettings = await prisma.botSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BotSettingsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BotSettingsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BotSettings'> extends True ? CheckSelect<T, Prisma__BotSettingsClient<BotSettings>, Prisma__BotSettingsClient<BotSettingsGetPayload<T>>> : CheckSelect<T, Prisma__BotSettingsClient<BotSettings | null >, Prisma__BotSettingsClient<BotSettingsGetPayload<T> | null >>

    /**
     * Find the first BotSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotSettingsFindFirstArgs} args - Arguments to find a BotSettings
     * @example
     * // Get one BotSettings
     * const botSettings = await prisma.botSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BotSettingsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BotSettingsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BotSettings'> extends True ? CheckSelect<T, Prisma__BotSettingsClient<BotSettings>, Prisma__BotSettingsClient<BotSettingsGetPayload<T>>> : CheckSelect<T, Prisma__BotSettingsClient<BotSettings | null >, Prisma__BotSettingsClient<BotSettingsGetPayload<T> | null >>

    /**
     * Find zero or more BotSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotSettingsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BotSettings
     * const botSettings = await prisma.botSettings.findMany()
     * 
     * // Get first 10 BotSettings
     * const botSettings = await prisma.botSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const botSettingsWithIdOnly = await prisma.botSettings.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BotSettingsFindManyArgs>(
      args?: SelectSubset<T, BotSettingsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<BotSettings>>, PrismaPromise<Array<BotSettingsGetPayload<T>>>>

    /**
     * Create a BotSettings.
     * @param {BotSettingsCreateArgs} args - Arguments to create a BotSettings.
     * @example
     * // Create one BotSettings
     * const BotSettings = await prisma.botSettings.create({
     *   data: {
     *     // ... data to create a BotSettings
     *   }
     * })
     * 
    **/
    create<T extends BotSettingsCreateArgs>(
      args: SelectSubset<T, BotSettingsCreateArgs>
    ): CheckSelect<T, Prisma__BotSettingsClient<BotSettings>, Prisma__BotSettingsClient<BotSettingsGetPayload<T>>>

    /**
     * Create many BotSettings.
     *     @param {BotSettingsCreateManyArgs} args - Arguments to create many BotSettings.
     *     @example
     *     // Create many BotSettings
     *     const botSettings = await prisma.botSettings.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BotSettingsCreateManyArgs>(
      args?: SelectSubset<T, BotSettingsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a BotSettings.
     * @param {BotSettingsDeleteArgs} args - Arguments to delete one BotSettings.
     * @example
     * // Delete one BotSettings
     * const BotSettings = await prisma.botSettings.delete({
     *   where: {
     *     // ... filter to delete one BotSettings
     *   }
     * })
     * 
    **/
    delete<T extends BotSettingsDeleteArgs>(
      args: SelectSubset<T, BotSettingsDeleteArgs>
    ): CheckSelect<T, Prisma__BotSettingsClient<BotSettings>, Prisma__BotSettingsClient<BotSettingsGetPayload<T>>>

    /**
     * Update one BotSettings.
     * @param {BotSettingsUpdateArgs} args - Arguments to update one BotSettings.
     * @example
     * // Update one BotSettings
     * const botSettings = await prisma.botSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BotSettingsUpdateArgs>(
      args: SelectSubset<T, BotSettingsUpdateArgs>
    ): CheckSelect<T, Prisma__BotSettingsClient<BotSettings>, Prisma__BotSettingsClient<BotSettingsGetPayload<T>>>

    /**
     * Delete zero or more BotSettings.
     * @param {BotSettingsDeleteManyArgs} args - Arguments to filter BotSettings to delete.
     * @example
     * // Delete a few BotSettings
     * const { count } = await prisma.botSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BotSettingsDeleteManyArgs>(
      args?: SelectSubset<T, BotSettingsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more BotSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BotSettings
     * const botSettings = await prisma.botSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BotSettingsUpdateManyArgs>(
      args: SelectSubset<T, BotSettingsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one BotSettings.
     * @param {BotSettingsUpsertArgs} args - Arguments to update or create a BotSettings.
     * @example
     * // Update or create a BotSettings
     * const botSettings = await prisma.botSettings.upsert({
     *   create: {
     *     // ... data to create a BotSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BotSettings we want to update
     *   }
     * })
    **/
    upsert<T extends BotSettingsUpsertArgs>(
      args: SelectSubset<T, BotSettingsUpsertArgs>
    ): CheckSelect<T, Prisma__BotSettingsClient<BotSettings>, Prisma__BotSettingsClient<BotSettingsGetPayload<T>>>

    /**
     * Count the number of BotSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotSettingsCountArgs} args - Arguments to filter BotSettings to count.
     * @example
     * // Count the number of BotSettings
     * const count = await prisma.botSettings.count({
     *   where: {
     *     // ... the filter for the BotSettings we want to count
     *   }
     * })
    **/
    count<T extends BotSettingsCountArgs>(
      args?: Subset<T, BotSettingsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BotSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BotSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BotSettingsAggregateArgs>(args: Subset<T, BotSettingsAggregateArgs>): PrismaPromise<GetBotSettingsAggregateType<T>>

    /**
     * Group by BotSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BotSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BotSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BotSettingsGroupByArgs['orderBy'] }
        : { orderBy?: BotSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BotSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBotSettingsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for BotSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BotSettingsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * BotSettings findUnique
   */
  export type BotSettingsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the BotSettings
     * 
    **/
    select?: BotSettingsSelect | null
    /**
     * Throw an Error if a BotSettings can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BotSettings to fetch.
     * 
    **/
    where: BotSettingsWhereUniqueInput
  }


  /**
   * BotSettings findFirst
   */
  export type BotSettingsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the BotSettings
     * 
    **/
    select?: BotSettingsSelect | null
    /**
     * Throw an Error if a BotSettings can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BotSettings to fetch.
     * 
    **/
    where?: BotSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BotSettings to fetch.
     * 
    **/
    orderBy?: Enumerable<BotSettingsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BotSettings.
     * 
    **/
    cursor?: BotSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BotSettings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BotSettings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BotSettings.
     * 
    **/
    distinct?: Enumerable<BotSettingsScalarFieldEnum>
  }


  /**
   * BotSettings findMany
   */
  export type BotSettingsFindManyArgs = {
    /**
     * Select specific fields to fetch from the BotSettings
     * 
    **/
    select?: BotSettingsSelect | null
    /**
     * Filter, which BotSettings to fetch.
     * 
    **/
    where?: BotSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BotSettings to fetch.
     * 
    **/
    orderBy?: Enumerable<BotSettingsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BotSettings.
     * 
    **/
    cursor?: BotSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BotSettings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BotSettings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BotSettingsScalarFieldEnum>
  }


  /**
   * BotSettings create
   */
  export type BotSettingsCreateArgs = {
    /**
     * Select specific fields to fetch from the BotSettings
     * 
    **/
    select?: BotSettingsSelect | null
    /**
     * The data needed to create a BotSettings.
     * 
    **/
    data: XOR<BotSettingsCreateInput, BotSettingsUncheckedCreateInput>
  }


  /**
   * BotSettings createMany
   */
  export type BotSettingsCreateManyArgs = {
    data: Enumerable<BotSettingsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BotSettings update
   */
  export type BotSettingsUpdateArgs = {
    /**
     * Select specific fields to fetch from the BotSettings
     * 
    **/
    select?: BotSettingsSelect | null
    /**
     * The data needed to update a BotSettings.
     * 
    **/
    data: XOR<BotSettingsUpdateInput, BotSettingsUncheckedUpdateInput>
    /**
     * Choose, which BotSettings to update.
     * 
    **/
    where: BotSettingsWhereUniqueInput
  }


  /**
   * BotSettings updateMany
   */
  export type BotSettingsUpdateManyArgs = {
    data: XOR<BotSettingsUpdateManyMutationInput, BotSettingsUncheckedUpdateManyInput>
    where?: BotSettingsWhereInput
  }


  /**
   * BotSettings upsert
   */
  export type BotSettingsUpsertArgs = {
    /**
     * Select specific fields to fetch from the BotSettings
     * 
    **/
    select?: BotSettingsSelect | null
    /**
     * The filter to search for the BotSettings to update in case it exists.
     * 
    **/
    where: BotSettingsWhereUniqueInput
    /**
     * In case the BotSettings found by the `where` argument doesn't exist, create a new BotSettings with this data.
     * 
    **/
    create: XOR<BotSettingsCreateInput, BotSettingsUncheckedCreateInput>
    /**
     * In case the BotSettings was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BotSettingsUpdateInput, BotSettingsUncheckedUpdateInput>
  }


  /**
   * BotSettings delete
   */
  export type BotSettingsDeleteArgs = {
    /**
     * Select specific fields to fetch from the BotSettings
     * 
    **/
    select?: BotSettingsSelect | null
    /**
     * Filter which BotSettings to delete.
     * 
    **/
    where: BotSettingsWhereUniqueInput
  }


  /**
   * BotSettings deleteMany
   */
  export type BotSettingsDeleteManyArgs = {
    where?: BotSettingsWhereInput
  }


  /**
   * BotSettings without action
   */
  export type BotSettingsArgs = {
    /**
     * Select specific fields to fetch from the BotSettings
     * 
    **/
    select?: BotSettingsSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const GuildScalarFieldEnum: {
    id: 'id'
  };

  export type GuildScalarFieldEnum = (typeof GuildScalarFieldEnum)[keyof typeof GuildScalarFieldEnum]


  export const GuildSettingsScalarFieldEnum: {
    guildId: 'guildId',
    prefix: 'prefix',
    advancedErrors: 'advancedErrors'
  };

  export type GuildSettingsScalarFieldEnum = (typeof GuildSettingsScalarFieldEnum)[keyof typeof GuildSettingsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    isBotOwner: 'isBotOwner'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BotSettingsScalarFieldEnum: {
    id: 'id',
    botOwnerID: 'botOwnerID',
    defaultPrefix: 'defaultPrefix',
    defaultAdvancedErrors: 'defaultAdvancedErrors'
  };

  export type BotSettingsScalarFieldEnum = (typeof BotSettingsScalarFieldEnum)[keyof typeof BotSettingsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type GuildWhereInput = {
    AND?: Enumerable<GuildWhereInput>
    OR?: Enumerable<GuildWhereInput>
    NOT?: Enumerable<GuildWhereInput>
    id?: StringFilter | string
    mods?: UserListRelationFilter
    admins?: UserListRelationFilter
    settings?: XOR<GuildSettingsRelationFilter, GuildSettingsWhereInput> | null
  }

  export type GuildOrderByInput = {
    id?: SortOrder
  }

  export type GuildWhereUniqueInput = {
    id?: string
  }

  export type GuildScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GuildScalarWhereWithAggregatesInput>
    OR?: Enumerable<GuildScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GuildScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
  }

  export type GuildSettingsWhereInput = {
    AND?: Enumerable<GuildSettingsWhereInput>
    OR?: Enumerable<GuildSettingsWhereInput>
    NOT?: Enumerable<GuildSettingsWhereInput>
    guild?: XOR<GuildRelationFilter, GuildWhereInput>
    guildId?: StringFilter | string
    prefix?: StringFilter | string
    advancedErrors?: BoolFilter | boolean
  }

  export type GuildSettingsOrderByInput = {
    guildId?: SortOrder
    prefix?: SortOrder
    advancedErrors?: SortOrder
  }

  export type GuildSettingsWhereUniqueInput = {
    guildId?: string
  }

  export type GuildSettingsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GuildSettingsScalarWhereWithAggregatesInput>
    OR?: Enumerable<GuildSettingsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GuildSettingsScalarWhereWithAggregatesInput>
    guildId?: StringWithAggregatesFilter | string
    prefix?: StringWithAggregatesFilter | string
    advancedErrors?: BoolWithAggregatesFilter | boolean
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    adminGuilds?: GuildListRelationFilter
    modGuilds?: GuildListRelationFilter
    isBotOwner?: BoolFilter | boolean
  }

  export type UserOrderByInput = {
    id?: SortOrder
    isBotOwner?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    isBotOwner?: BoolWithAggregatesFilter | boolean
  }

  export type BotSettingsWhereInput = {
    AND?: Enumerable<BotSettingsWhereInput>
    OR?: Enumerable<BotSettingsWhereInput>
    NOT?: Enumerable<BotSettingsWhereInput>
    id?: IntFilter | number
    botOwnerID?: StringFilter | string
    defaultPrefix?: StringFilter | string
    defaultAdvancedErrors?: BoolFilter | boolean
  }

  export type BotSettingsOrderByInput = {
    id?: SortOrder
    botOwnerID?: SortOrder
    defaultPrefix?: SortOrder
    defaultAdvancedErrors?: SortOrder
  }

  export type BotSettingsWhereUniqueInput = {
    id?: number
  }

  export type BotSettingsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BotSettingsScalarWhereWithAggregatesInput>
    OR?: Enumerable<BotSettingsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BotSettingsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    botOwnerID?: StringWithAggregatesFilter | string
    defaultPrefix?: StringWithAggregatesFilter | string
    defaultAdvancedErrors?: BoolWithAggregatesFilter | boolean
  }

  export type GuildCreateInput = {
    id: string
    mods?: UserCreateNestedManyWithoutModGuildsInput
    admins?: UserCreateNestedManyWithoutAdminGuildsInput
    settings?: GuildSettingsCreateNestedOneWithoutGuildInput
  }

  export type GuildUncheckedCreateInput = {
    id: string
    settings?: GuildSettingsUncheckedCreateNestedOneWithoutGuildInput
  }

  export type GuildUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mods?: UserUpdateManyWithoutModGuildsInput
    admins?: UserUpdateManyWithoutAdminGuildsInput
    settings?: GuildSettingsUpdateOneWithoutGuildInput
  }

  export type GuildUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    settings?: GuildSettingsUncheckedUpdateOneWithoutGuildInput
  }

  export type GuildCreateManyInput = {
    id: string
  }

  export type GuildUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type GuildUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type GuildSettingsCreateInput = {
    prefix?: string
    advancedErrors?: boolean
    guild: GuildCreateNestedOneWithoutSettingsInput
  }

  export type GuildSettingsUncheckedCreateInput = {
    guildId: string
    prefix?: string
    advancedErrors?: boolean
  }

  export type GuildSettingsUpdateInput = {
    prefix?: StringFieldUpdateOperationsInput | string
    advancedErrors?: BoolFieldUpdateOperationsInput | boolean
    guild?: GuildUpdateOneRequiredWithoutSettingsInput
  }

  export type GuildSettingsUncheckedUpdateInput = {
    guildId?: StringFieldUpdateOperationsInput | string
    prefix?: StringFieldUpdateOperationsInput | string
    advancedErrors?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GuildSettingsCreateManyInput = {
    guildId: string
    prefix?: string
    advancedErrors?: boolean
  }

  export type GuildSettingsUpdateManyMutationInput = {
    prefix?: StringFieldUpdateOperationsInput | string
    advancedErrors?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GuildSettingsUncheckedUpdateManyInput = {
    guildId?: StringFieldUpdateOperationsInput | string
    prefix?: StringFieldUpdateOperationsInput | string
    advancedErrors?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateInput = {
    id: string
    isBotOwner?: boolean
    adminGuilds?: GuildCreateNestedManyWithoutAdminsInput
    modGuilds?: GuildCreateNestedManyWithoutModsInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    isBotOwner?: boolean
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBotOwner?: BoolFieldUpdateOperationsInput | boolean
    adminGuilds?: GuildUpdateManyWithoutAdminsInput
    modGuilds?: GuildUpdateManyWithoutModsInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBotOwner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateManyInput = {
    id: string
    isBotOwner?: boolean
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBotOwner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBotOwner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BotSettingsCreateInput = {
    botOwnerID: string
    defaultPrefix: string
    defaultAdvancedErrors: boolean
  }

  export type BotSettingsUncheckedCreateInput = {
    id?: number
    botOwnerID: string
    defaultPrefix: string
    defaultAdvancedErrors: boolean
  }

  export type BotSettingsUpdateInput = {
    botOwnerID?: StringFieldUpdateOperationsInput | string
    defaultPrefix?: StringFieldUpdateOperationsInput | string
    defaultAdvancedErrors?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BotSettingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    botOwnerID?: StringFieldUpdateOperationsInput | string
    defaultPrefix?: StringFieldUpdateOperationsInput | string
    defaultAdvancedErrors?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BotSettingsCreateManyInput = {
    id?: number
    botOwnerID: string
    defaultPrefix: string
    defaultAdvancedErrors: boolean
  }

  export type BotSettingsUpdateManyMutationInput = {
    botOwnerID?: StringFieldUpdateOperationsInput | string
    defaultPrefix?: StringFieldUpdateOperationsInput | string
    defaultAdvancedErrors?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BotSettingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    botOwnerID?: StringFieldUpdateOperationsInput | string
    defaultPrefix?: StringFieldUpdateOperationsInput | string
    defaultAdvancedErrors?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type GuildSettingsRelationFilter = {
    is?: GuildSettingsWhereInput | null
    isNot?: GuildSettingsWhereInput | null
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type GuildRelationFilter = {
    is?: GuildWhereInput
    isNot?: GuildWhereInput
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type GuildListRelationFilter = {
    every?: GuildWhereInput
    some?: GuildWhereInput
    none?: GuildWhereInput
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type UserCreateNestedManyWithoutModGuildsInput = {
    create?: XOR<Enumerable<UserCreateWithoutModGuildsInput>, Enumerable<UserUncheckedCreateWithoutModGuildsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutModGuildsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type UserCreateNestedManyWithoutAdminGuildsInput = {
    create?: XOR<Enumerable<UserCreateWithoutAdminGuildsInput>, Enumerable<UserUncheckedCreateWithoutAdminGuildsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAdminGuildsInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type GuildSettingsCreateNestedOneWithoutGuildInput = {
    create?: XOR<GuildSettingsCreateWithoutGuildInput, GuildSettingsUncheckedCreateWithoutGuildInput>
    connectOrCreate?: GuildSettingsCreateOrConnectWithoutGuildInput
    connect?: GuildSettingsWhereUniqueInput
  }

  export type GuildSettingsUncheckedCreateNestedOneWithoutGuildInput = {
    create?: XOR<GuildSettingsCreateWithoutGuildInput, GuildSettingsUncheckedCreateWithoutGuildInput>
    connectOrCreate?: GuildSettingsCreateOrConnectWithoutGuildInput
    connect?: GuildSettingsWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateManyWithoutModGuildsInput = {
    create?: XOR<Enumerable<UserCreateWithoutModGuildsInput>, Enumerable<UserUncheckedCreateWithoutModGuildsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutModGuildsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutModGuildsInput>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutModGuildsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutModGuildsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type UserUpdateManyWithoutAdminGuildsInput = {
    create?: XOR<Enumerable<UserCreateWithoutAdminGuildsInput>, Enumerable<UserUncheckedCreateWithoutAdminGuildsInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutAdminGuildsInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutAdminGuildsInput>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutAdminGuildsInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutAdminGuildsInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type GuildSettingsUpdateOneWithoutGuildInput = {
    create?: XOR<GuildSettingsCreateWithoutGuildInput, GuildSettingsUncheckedCreateWithoutGuildInput>
    connectOrCreate?: GuildSettingsCreateOrConnectWithoutGuildInput
    upsert?: GuildSettingsUpsertWithoutGuildInput
    connect?: GuildSettingsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<GuildSettingsUpdateWithoutGuildInput, GuildSettingsUncheckedUpdateWithoutGuildInput>
  }

  export type GuildSettingsUncheckedUpdateOneWithoutGuildInput = {
    create?: XOR<GuildSettingsCreateWithoutGuildInput, GuildSettingsUncheckedCreateWithoutGuildInput>
    connectOrCreate?: GuildSettingsCreateOrConnectWithoutGuildInput
    upsert?: GuildSettingsUpsertWithoutGuildInput
    connect?: GuildSettingsWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<GuildSettingsUpdateWithoutGuildInput, GuildSettingsUncheckedUpdateWithoutGuildInput>
  }

  export type GuildCreateNestedOneWithoutSettingsInput = {
    create?: XOR<GuildCreateWithoutSettingsInput, GuildUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: GuildCreateOrConnectWithoutSettingsInput
    connect?: GuildWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type GuildUpdateOneRequiredWithoutSettingsInput = {
    create?: XOR<GuildCreateWithoutSettingsInput, GuildUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: GuildCreateOrConnectWithoutSettingsInput
    upsert?: GuildUpsertWithoutSettingsInput
    connect?: GuildWhereUniqueInput
    update?: XOR<GuildUpdateWithoutSettingsInput, GuildUncheckedUpdateWithoutSettingsInput>
  }

  export type GuildCreateNestedManyWithoutAdminsInput = {
    create?: XOR<Enumerable<GuildCreateWithoutAdminsInput>, Enumerable<GuildUncheckedCreateWithoutAdminsInput>>
    connectOrCreate?: Enumerable<GuildCreateOrConnectWithoutAdminsInput>
    connect?: Enumerable<GuildWhereUniqueInput>
  }

  export type GuildCreateNestedManyWithoutModsInput = {
    create?: XOR<Enumerable<GuildCreateWithoutModsInput>, Enumerable<GuildUncheckedCreateWithoutModsInput>>
    connectOrCreate?: Enumerable<GuildCreateOrConnectWithoutModsInput>
    connect?: Enumerable<GuildWhereUniqueInput>
  }

  export type GuildUpdateManyWithoutAdminsInput = {
    create?: XOR<Enumerable<GuildCreateWithoutAdminsInput>, Enumerable<GuildUncheckedCreateWithoutAdminsInput>>
    connectOrCreate?: Enumerable<GuildCreateOrConnectWithoutAdminsInput>
    upsert?: Enumerable<GuildUpsertWithWhereUniqueWithoutAdminsInput>
    connect?: Enumerable<GuildWhereUniqueInput>
    set?: Enumerable<GuildWhereUniqueInput>
    disconnect?: Enumerable<GuildWhereUniqueInput>
    delete?: Enumerable<GuildWhereUniqueInput>
    update?: Enumerable<GuildUpdateWithWhereUniqueWithoutAdminsInput>
    updateMany?: Enumerable<GuildUpdateManyWithWhereWithoutAdminsInput>
    deleteMany?: Enumerable<GuildScalarWhereInput>
  }

  export type GuildUpdateManyWithoutModsInput = {
    create?: XOR<Enumerable<GuildCreateWithoutModsInput>, Enumerable<GuildUncheckedCreateWithoutModsInput>>
    connectOrCreate?: Enumerable<GuildCreateOrConnectWithoutModsInput>
    upsert?: Enumerable<GuildUpsertWithWhereUniqueWithoutModsInput>
    connect?: Enumerable<GuildWhereUniqueInput>
    set?: Enumerable<GuildWhereUniqueInput>
    disconnect?: Enumerable<GuildWhereUniqueInput>
    delete?: Enumerable<GuildWhereUniqueInput>
    update?: Enumerable<GuildUpdateWithWhereUniqueWithoutModsInput>
    updateMany?: Enumerable<GuildUpdateManyWithWhereWithoutModsInput>
    deleteMany?: Enumerable<GuildScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedStringFilter
    _max?: NestedStringFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _min?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedBoolFilter
    _max?: NestedBoolFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedBoolFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    count?: NestedIntFilter
    _avg?: NestedFloatFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    sum?: NestedIntFilter
    _min?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    min?: NestedIntFilter
    _max?: NestedIntFilter
    /**
     * @deprecated since 2.23 because Aggregation keywords got unified to use underscore as prefix to prevent field clashes.
     * 
    **/
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type UserCreateWithoutModGuildsInput = {
    id: string
    isBotOwner?: boolean
    adminGuilds?: GuildCreateNestedManyWithoutAdminsInput
  }

  export type UserUncheckedCreateWithoutModGuildsInput = {
    id: string
    isBotOwner?: boolean
  }

  export type UserCreateOrConnectWithoutModGuildsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutModGuildsInput, UserUncheckedCreateWithoutModGuildsInput>
  }

  export type UserCreateWithoutAdminGuildsInput = {
    id: string
    isBotOwner?: boolean
    modGuilds?: GuildCreateNestedManyWithoutModsInput
  }

  export type UserUncheckedCreateWithoutAdminGuildsInput = {
    id: string
    isBotOwner?: boolean
  }

  export type UserCreateOrConnectWithoutAdminGuildsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminGuildsInput, UserUncheckedCreateWithoutAdminGuildsInput>
  }

  export type GuildSettingsCreateWithoutGuildInput = {
    prefix?: string
    advancedErrors?: boolean
  }

  export type GuildSettingsUncheckedCreateWithoutGuildInput = {
    prefix?: string
    advancedErrors?: boolean
  }

  export type GuildSettingsCreateOrConnectWithoutGuildInput = {
    where: GuildSettingsWhereUniqueInput
    create: XOR<GuildSettingsCreateWithoutGuildInput, GuildSettingsUncheckedCreateWithoutGuildInput>
  }

  export type UserUpsertWithWhereUniqueWithoutModGuildsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutModGuildsInput, UserUncheckedUpdateWithoutModGuildsInput>
    create: XOR<UserCreateWithoutModGuildsInput, UserUncheckedCreateWithoutModGuildsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutModGuildsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutModGuildsInput, UserUncheckedUpdateWithoutModGuildsInput>
  }

  export type UserUpdateManyWithWhereWithoutModGuildsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutModsInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: StringFilter | string
    isBotOwner?: BoolFilter | boolean
  }

  export type UserUpsertWithWhereUniqueWithoutAdminGuildsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAdminGuildsInput, UserUncheckedUpdateWithoutAdminGuildsInput>
    create: XOR<UserCreateWithoutAdminGuildsInput, UserUncheckedCreateWithoutAdminGuildsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAdminGuildsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAdminGuildsInput, UserUncheckedUpdateWithoutAdminGuildsInput>
  }

  export type UserUpdateManyWithWhereWithoutAdminGuildsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAdminsInput>
  }

  export type GuildSettingsUpsertWithoutGuildInput = {
    update: XOR<GuildSettingsUpdateWithoutGuildInput, GuildSettingsUncheckedUpdateWithoutGuildInput>
    create: XOR<GuildSettingsCreateWithoutGuildInput, GuildSettingsUncheckedCreateWithoutGuildInput>
  }

  export type GuildSettingsUpdateWithoutGuildInput = {
    prefix?: StringFieldUpdateOperationsInput | string
    advancedErrors?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GuildSettingsUncheckedUpdateWithoutGuildInput = {
    prefix?: StringFieldUpdateOperationsInput | string
    advancedErrors?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GuildCreateWithoutSettingsInput = {
    id: string
    mods?: UserCreateNestedManyWithoutModGuildsInput
    admins?: UserCreateNestedManyWithoutAdminGuildsInput
  }

  export type GuildUncheckedCreateWithoutSettingsInput = {
    id: string
  }

  export type GuildCreateOrConnectWithoutSettingsInput = {
    where: GuildWhereUniqueInput
    create: XOR<GuildCreateWithoutSettingsInput, GuildUncheckedCreateWithoutSettingsInput>
  }

  export type GuildUpsertWithoutSettingsInput = {
    update: XOR<GuildUpdateWithoutSettingsInput, GuildUncheckedUpdateWithoutSettingsInput>
    create: XOR<GuildCreateWithoutSettingsInput, GuildUncheckedCreateWithoutSettingsInput>
  }

  export type GuildUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mods?: UserUpdateManyWithoutModGuildsInput
    admins?: UserUpdateManyWithoutAdminGuildsInput
  }

  export type GuildUncheckedUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type GuildCreateWithoutAdminsInput = {
    id: string
    mods?: UserCreateNestedManyWithoutModGuildsInput
    settings?: GuildSettingsCreateNestedOneWithoutGuildInput
  }

  export type GuildUncheckedCreateWithoutAdminsInput = {
    id: string
    settings?: GuildSettingsUncheckedCreateNestedOneWithoutGuildInput
  }

  export type GuildCreateOrConnectWithoutAdminsInput = {
    where: GuildWhereUniqueInput
    create: XOR<GuildCreateWithoutAdminsInput, GuildUncheckedCreateWithoutAdminsInput>
  }

  export type GuildCreateWithoutModsInput = {
    id: string
    admins?: UserCreateNestedManyWithoutAdminGuildsInput
    settings?: GuildSettingsCreateNestedOneWithoutGuildInput
  }

  export type GuildUncheckedCreateWithoutModsInput = {
    id: string
    settings?: GuildSettingsUncheckedCreateNestedOneWithoutGuildInput
  }

  export type GuildCreateOrConnectWithoutModsInput = {
    where: GuildWhereUniqueInput
    create: XOR<GuildCreateWithoutModsInput, GuildUncheckedCreateWithoutModsInput>
  }

  export type GuildUpsertWithWhereUniqueWithoutAdminsInput = {
    where: GuildWhereUniqueInput
    update: XOR<GuildUpdateWithoutAdminsInput, GuildUncheckedUpdateWithoutAdminsInput>
    create: XOR<GuildCreateWithoutAdminsInput, GuildUncheckedCreateWithoutAdminsInput>
  }

  export type GuildUpdateWithWhereUniqueWithoutAdminsInput = {
    where: GuildWhereUniqueInput
    data: XOR<GuildUpdateWithoutAdminsInput, GuildUncheckedUpdateWithoutAdminsInput>
  }

  export type GuildUpdateManyWithWhereWithoutAdminsInput = {
    where: GuildScalarWhereInput
    data: XOR<GuildUpdateManyMutationInput, GuildUncheckedUpdateManyWithoutAdminGuildsInput>
  }

  export type GuildScalarWhereInput = {
    AND?: Enumerable<GuildScalarWhereInput>
    OR?: Enumerable<GuildScalarWhereInput>
    NOT?: Enumerable<GuildScalarWhereInput>
    id?: StringFilter | string
  }

  export type GuildUpsertWithWhereUniqueWithoutModsInput = {
    where: GuildWhereUniqueInput
    update: XOR<GuildUpdateWithoutModsInput, GuildUncheckedUpdateWithoutModsInput>
    create: XOR<GuildCreateWithoutModsInput, GuildUncheckedCreateWithoutModsInput>
  }

  export type GuildUpdateWithWhereUniqueWithoutModsInput = {
    where: GuildWhereUniqueInput
    data: XOR<GuildUpdateWithoutModsInput, GuildUncheckedUpdateWithoutModsInput>
  }

  export type GuildUpdateManyWithWhereWithoutModsInput = {
    where: GuildScalarWhereInput
    data: XOR<GuildUpdateManyMutationInput, GuildUncheckedUpdateManyWithoutModGuildsInput>
  }

  export type UserUpdateWithoutModGuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBotOwner?: BoolFieldUpdateOperationsInput | boolean
    adminGuilds?: GuildUpdateManyWithoutAdminsInput
  }

  export type UserUncheckedUpdateWithoutModGuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBotOwner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyWithoutModsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBotOwner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUpdateWithoutAdminGuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBotOwner?: BoolFieldUpdateOperationsInput | boolean
    modGuilds?: GuildUpdateManyWithoutModsInput
  }

  export type UserUncheckedUpdateWithoutAdminGuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBotOwner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyWithoutAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    isBotOwner?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GuildUpdateWithoutAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mods?: UserUpdateManyWithoutModGuildsInput
    settings?: GuildSettingsUpdateOneWithoutGuildInput
  }

  export type GuildUncheckedUpdateWithoutAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    settings?: GuildSettingsUncheckedUpdateOneWithoutGuildInput
  }

  export type GuildUncheckedUpdateManyWithoutAdminGuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type GuildUpdateWithoutModsInput = {
    id?: StringFieldUpdateOperationsInput | string
    admins?: UserUpdateManyWithoutAdminGuildsInput
    settings?: GuildSettingsUpdateOneWithoutGuildInput
  }

  export type GuildUncheckedUpdateWithoutModsInput = {
    id?: StringFieldUpdateOperationsInput | string
    settings?: GuildSettingsUncheckedUpdateOneWithoutGuildInput
  }

  export type GuildUncheckedUpdateManyWithoutModGuildsInput = {
    id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}